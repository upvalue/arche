# generate-types


print("// types-generated.ts - Automatically generated types from source code")
print("// Generated by generate-types.py ")
print("/* tslint-disable */")

breakpoints = ("sm", "md", "lg")
types = ("p", "m")
subs = ("x", "y", "l", "r", "t", "b")

for tipe in types:
    print(f"export type {'Padding' if tipe == 'p' else 'Margin'}Class = ", end="")
    res = []
    for n in range(0, 6):
        res.append(f'"{tipe}{n}"')
        for sub in subs:
            res.append(f'"{tipe}{sub}{n}"')
        for bp in breakpoints:
            res.append(f'"{bp}-{tipe}{n}"')
            for sub in subs:
                res.append(f'"{bp}-{tipe}{sub}{n}"')
    print(" | ".join(res), end="")
    print(";\n")

classnames = []
props = {
    'items': [],
    'justify': [],
    'content': []
}
# props = ['items', 'justify', 'content']

with open("src/styles/flex.scss") as flex:
    for line in flex.readlines():
        if line.strip().startswith("."):
            classname = line.strip().strip(".").split("{")[0]
            classtype = classname.split('-')
            if len(classtype) == 2 and classtype[0] in props.keys():
                props[classtype[0]].append(classtype[1].strip())
            # classnames.append(f'"{classname.strip()}"')
            # print(classname.split('-'))

# print(f'export type FlexClass = {" | ".join(classnames)};')
